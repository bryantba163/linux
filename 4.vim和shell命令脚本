Vim编辑器和Shell命令脚本
1.vim
  vim是一种文本编辑器，有三种模式：命令模式，末行模式，编辑模式
  命令模式：控制光标移动，可以对文本进行复制，粘贴，删除，查找等工作
  输入模式(编辑模式)：正常的文本输入
  末行模式：保存或退出文档，以及设置编辑环境
  命令模式使用a,i,o等键进入编辑模式，编辑模式用esc键进入命令模式，命令模式用：键进入末行模式，末行模式用：键进入命令模式
  每次运行vim编辑器时默认进入命令模式，先切入到编辑模式，编写完文档后切回命令模式，再进入末行模式保存或退出。在vim编辑器中，无法直接从编辑模式进入末行模式。
  vim编辑器在命令模式常用的几个命令
  dd 删除(剪切)光标所在的整行
  5dd 删除(剪切)从光标处开始的5行
  yy 复制光标所在整行
  5yy 复制从光标处开始的5行
  n 显示搜索命令定位到的下一个字符串
  N 显示搜索命令定位到的上一个字符串
  u 撤销上一步操作
  p 将之前删除(dd)或复制(yy)过的数据粘贴到光标的后面
  末行模式主要用来保存或者退出文件以及设置vim编辑器的工作环境，还可以让用户执行外部的Linux的命令或者跳转到所编写文档的指定行数。要切换到末行模式，在命令模式中输入一个冒号： 即可。末行模式中可用的命令：
  ：w  保存
  ：q  退出
  ：q! 强制退出
  ：wq！ 强制保存退出
  ：set nu 显示行号
  ：set nonu 不显示行号
  ：命令 执行该命令
  ：整数 跳转到该行
  ：s/one/two 将当前光标所在的第一个one替换成two
  ：s/one/two/g 将当前光标所在行的所有one替换成two
  ：%s/one/two/g 将全文中的所有own替换成two
  ？字符串 在文本中从下至上搜索该字符串
  /字符串 在文本中从上至下搜索该字符串
2.vim编辑文本的实例
  1）配置主机名称
  Linux系统中，主机名大多保存在/etc/hostname 文件中，修改/etc/hostname 文件来配置主机名称为linux
  2)配置网卡信息
  Linux中网卡信息在/etc/sysconfig/network-script中
  依次为：
  设备类型：TYPE=Ethernet 
  地址分配模式：BOOTPROTO=static 
  网卡名称：NAME=eno16777736 
  是否启动：ONBOOT=yes 
  IP 地址：IPADDR=192.168.10.10 
  子网掩码：NETMASK=255.255.255.0 
  网关地址：GATEWAY=192.168.10.1 
  DNS 地址：DNS1=192.168.10.1
  然后重启网络服务
  3）配置yum软件仓库
  yum软件仓库配置文件在/etc/yum.repos.d/中，建立一个rhel7.repo的新的配置文件，然后逐项写入以下的配置参数并保存退出：
  [rhel-media] ：Yum 软件仓库唯一标识符，避免与其他仓库冲突。
  name=linuxprobe：Yum 软件仓库的名称描述，易于识别仓库用处。
  baseurl=file:///media/cdrom：提供的方式包括FTP（ftp://..）、HTTP（http://..）、本地（file:///..）。 
  enabled=1：设置此源是否可用；1 为可用，0 为禁用。
  gpgcheck=1：设置此源是否校验文件；1 为校验，0 为不校验。
  gpgkey=file:///media/cdrom/RPM-GPG-KEY-redhat-release：若上面参数开启校验，那么请指定公钥文件地址
  然后按照配置参数的路径挂载光盘，并把光盘挂载信息写入到/etc/fstab中，使用"yum install httpd -y"检查yum软件仓库是否可用。
  我的主机阿里云默认以配置了yum软件仓库，这个场景一般适用于自建镜像。
3.Shell脚本
  1）shell脚本简单写法
  shell终端解释器当作人与计算机硬件之间的翻译官，作为用户和Linux系统内部的通信媒介，除了支持各种变量与参数外，还提供了诸如循环，分支等高级编程语言才有的控制结构特性。要想正确使用Shell中的这些功能特性，准确下达命令尤为重要。
  shell脚本命令的工作方式有两种：
  交互式(Interactive)：用户每输入一条命令就立即执行。
  批处理(Batch)：由用户事先编写好一个完整的Shell脚本，Shell会一次性执行脚本中的诸多命令。
  在Shell脚本中不仅会用到前面学习过的很多Linux命令以及正则表达式，管道符，数据流重定向等语法规则，还需要把内部功能模块化后通过逻辑语句进行处理，最终形成Shell脚本。
  简单的Shell脚本中，使用vim编辑器把Linux命令按照顺序依次写入到一个文件中，就是一个简单的脚本了。
  例：如果想查看当前所在的工作路径并列出当前目录下所有的文件及属性信息，实现这个功能的脚本应该为：
  vim example.sh
  #！/bin/bash
  #For Example BY balin
  pwd
  ls -al
  Shell脚本文件名可以任意，但是为了区别与普通文件，加上.sh后缀，以表示是一个脚本文件。在上面这个example.sh脚本中实际体现出了三种不同元素：第一行为脚本声明以 #! 用来告诉系统使用哪种shell解释器来执行该脚本；第二行为注释信息，以 # 是对脚本功能和某些命令的介绍信息，使得自己或他人在以后查看这个脚本时可以快速指定这个脚本的作用和一些警告信息；第三，四行的可执行语句也就是我们平时可以执行的Linux命令。
  脚本执行的方式：
  bash example.sh和./example.sh两种方式，但是默认会因为权限不够而提示报错信息，则需要给文件提权限，后续有。

  2）接收用户的参数
  简单的shell脚本只能执行一些预先定义好的功能，过于死板，为了让Shell脚本程序可以更好的满足用户一些实时的需求，以便灵活完成工作，必须要让脚本程序能够像之前执行命令时那样，接收用户输入的参数。
  在Linux系统的shell脚本语言已经内设了用于接收参数的变量，变量之间可以使用空格间隔。例如$0，对应的时当前Shell脚本程序的名称，$#对应的是总共有几个参数，$*对应的是所有位置的参数值，$?对应的是显示上一次命令的执行返回值，而$1,$2,$3...则分别对应了第N个位置的参数值，如：./example.sh one two three four five six 
  $1，第一个位置参数 one，$2，第二个位置的参数 two
  编写一个脚本，引用以上的变量参数来看效果：
  vim example.sh
  #!/bin/bash
  echo "当前脚本名称为$0"
  echo "总共有$#个参数，分别是$*。"
  echo "第一个参数为$1，第五个参数为$5。"
  ./example.sh one two three four five six
  当前脚本名称为example.sh
  总共有6个参数，分别是one two three four five six。
  第一个参数为one，第五个参数为five。

  3）判断用户的参数(条件测试语句)
  Shell脚本中的条件测试语法可以判断表达式是否成立，若条件成立则返回数字0，否则返回其他随机数值。
  条件测试语法的执行格式为：[ 条件表达式 ] 切记，条件表达式两边均应该有一个空格。
  按照测试对象来划分，条件测试语句可以分为4种：
  文件测试语句；
  逻辑测试语句；
  整数值比较语句；
  字符串比较语句；
  文件测试即使用指定条件来判断文件是否存在或权限是否满足等情况的运算符，具体参数为：
  -d 测试文件是否为目录类型
  -e 测试文件是否存在
  -f 判断是否为一般文件
  -r 测试当前用户是否有权限读取
  -w 测试当前用户是否有权限写入
  -x 测试当前用户是否有权限执行
  例：使用文件测试语句来判断/etc/fstab 是否为一个目录类型文件，然后通过Shell解释器的内设$?变量来显示上一条命令执行后的返回值。如果返回值为0，则目录存在；如果返回值为非零的值，则意味着目录不存在：
  [ -d /etc/fstab ]
  echo $?
  1
  再使用文件测试语句来判断/etc/fstab是否为一般文件，如果返回值为0，则表示文件存在而且为一般文件：
  [ -f /etc/fstab ]
  echo $?
  0
  逻辑语句用于对测试结果进行逻辑分析，根据测试结果可以实现不同的效果。例如，在shell终端中逻辑"与"的运算符号是&&，它表示当前面命令执行成功后才会执行它后面的命令。因此可以用来判断/dev/cdrom文件是否存在，若存在则输出Exit字样
  [ -e /dev/cdrom ] && echo "Exit"
  Exit
  注：这个输出结果在我的云主机是无法体现，因为云主机无cdrom文件，但是在服务器上可以看到cdrom这个文件，即可以体现出来，这个例子主要为了体现出-e 这个逻辑语句的用法和Linux系统中"与"的运算符&&，如果在系统中[ -e /dev/vda ] && echo "Exit"则可以显示出Exit来。
  除了逻辑"与"之外还有"或"，"或"的运算符为||，表示当前面的命令执行失败后才会执行运算符后面的命令，因此可以用来结合系统环境变量USER来判断当前登陆的用户是否为非管理员身份：
  先echo $USER输出为root 即管理员身份
  [ $USER = root ] || echo "user"
  这个在root账户中不会输出，但是su balin 进入普通用户，会输出user
  注：这个例子主要为了体现出来，"或"这个逻辑和"或"在shell中的运算符 ||
  第三种逻辑为"非"，在Linux系统中的运算符为！，它表示把条件测试中的判断结果取相反值。也就是说，如果原本测试的结果是正确的，则用！将其变成错误的，原本测试结果错误的则将其变成正确的。
  例：现在将终端切换到一个普通用户的身份，再判断当前用户是否为一个非管理员的用户。由于判断结果因为两次否定而变成正确，所以会正常输出预设信息：
  [ ! $USER = root ] || echo "admin"
  会输出admin
  下面来搞一个高级的与或非逻辑运算符的例子：
  [ ! $USER = root ] && echo "user" || echo "root"
  会输出root，这个例子就是要搞清楚逻辑运算符的顺序，逻辑很重要，先算哪个后算哪个，为什么会输出root。这个语句解释：当前我们正在登录的即为管理员用户—root。下面这个示例的执行顺序是，先判断当前登录用户的 USER 变量名称是否等于 root，然后用逻辑运算符“非”进行取反操作，效果就变成了判断当前登录的用户是否为非管理员用户了。最后若条件成立则会根据逻辑“与”运算符输出 user 字样；或条件不满足则会通过逻辑“或”运算符输出 root 字样，而如果前面的&&不成立才会执行后面的||符号。
  以上为条件判断语句中：与或非逻辑判断
  整数比较运算符
  整数比较运算符仅是对数字的操作，不能将数字与字符串，文件等内容一起操作，而且不能想当然的使用日常生活中的等号，大于号，小于号等来进行比较。因为等号与赋值命令符冲突，大于号和小于号分别与输出重定向和输入重定向命令符冲突。所以shell中有规范的整数比较运算符来进行操作。
  可用的整数比较运算符有：
  -eq 是否等于
  -ne 是否不等于
  -gt 是否大于gt
  -lt 是否小于
  -le 是否等于或小于(小于等于号)
  -ge 是否等于或大于(大于等于号)
  这点与Python中有类似，但是具体运算符不也一样，不要混淆，逻辑一样的，但是运算符不一样！！！(包括上面与或非逻辑符跟Python中与或非逻辑相同，但是运算符是shell的运算符)
  例：测试10是否大于10，以及是否等于10，使用返回值内容判断(0和其他返回值)
  [ 10 -gt 10 ]
  echo $?
  1
  表示10不大于10
  [ 10 -eq 10 ]
  echo $?
  0
  表示10等于10
  例：free 命令的高阶用法
  free -m | grep MEM: | awk '{print $4}'
  先使用 free -m 命令查看内存使用量情况（单位为 MB），然后通过 grep Mem:命令过滤出剩余内存量的行，再用 awk '{print $4}'命令只保留第四列，最后用 FreeMem=`语句`的方式把语句内执行的结果赋值给变量。
  free -m | grep Mem: | awk '{print $4}'
  输出为144
  变量FreeMem=`free -m | grep Mem: | awk '{print $4}'`
  echo $FreeMem
  输出144
  这个可以来获取内存可用量，其中awk下面会讲到，主要是为了将FreeMem这个变量用下面例子中：
  使用整数运算符来判断内存可用量的值是否小于1024，如果小于则会提示"Insufficient Memory"(内存不足)的字样：
  [ $FreeMen -lt 1024 ] && echo "Insufficient Memory"
  字符串比较语句用于判断测试字符串是否为空值，或者两个字符串是否相同。经常用来判断某个变量是否未被定义(即内容为空值)。
  字符串中常见的运算符有：
  = 比较字符串内容是否相同
  ！= 比较字符串内容是否不同
  -z 判断字符串内容是否为空
  例：判断String变量是否为空值，进而判断是否定义了这个变量
  [ -z $String ]
  echo $?
  0
  说明String变量是空值，未定义这个变量
  再尝试引入逻辑运算符来算用于保存当前语系的环境变量值LANG不是英语(en.US)时，则会满足逻辑测试条件并输出"Not en.US"(非英语)的字样：
  [ $LANG != "en.US" ] && ehco "Not en.US"
  输出Not en.US
  这个小结重点：Shell脚本中的条件测试语法可以判断表达式是否成立，若条件成立则返回数字0，否则返回其他随机数值。
  条件测试语法的执行格式为：[ 条件表达式 ] 切记，条件表达式两边均应该有一个空格
  条件测试语句可以分为4种：

  文件测试语句；
  -d 测试文件是否为目录类型
  -e 测试文件是否存在
  -f 判断是否为一般文件
  -r 测试当前用户是否有权限读取
  -w 测试当前用户是否有权限写入
  -x 测试当前用户是否有权限执行

  逻辑测试语句；
  "与"的运算符号是&&
  "或"的运算符为||
  "非"的运算符为！

  整数值比较语句；
  -eq 是否等于
  -ne 是否不等于
  -gt 是否大于gt
  -lt 是否小于
  -le 是否等于或小于(小于等于号)
  -ge 是否等于或大于(大于等于号)

  字符串比较语句；
   = 比较字符串内容是否相同
  ！= 比较字符串内容是否不同
  -z 判断字符串内容是否为空

4.流程控制的语句
  上面讲了使用Linux命令，管道符，重定向和条件测试语句来写脚本，但是这种脚本不适应生产环境，因为不能根据实际的工作需要来调整具体的执行命令，也不能根据某些条件来实现循环的执行，以下是四个控制流程的语句：if for while case
  1）if条件测试语句
  if 条件测试语句可以让脚本根据实际情况自动执行相应的命令。
  if 语句分为：单分支结构，双分支结构，多分支结构
  if 条件语句的单分支结构由：
  if，then，fi关键词组成，而且只有条件成立后才执行预设的命令，相当于"如果...那么...."。
  单分支的if语句属于最简单的一种条件判断结构，语法格式为：
  if 条件测试操作
     then 命令序列
  fi
  例如：
  if 目录不存在
     then 创建目录
  fi
  实例：使用单分支的if条件语句来判断/media/cdrom这个目录是否存在，若存在就结束条件判断和整个Shell脚本，反之则创建这个目录，在我的云主机里一定没有/media/cdrom这个目录。
  vim mkcdrom.sh
  #!/bin/bash
  DIR="/media/cdrom"
  if [ ! -e $DIR ]
  then
  mkdir -p $DIR
  fi
  在云主机上测试成功

  if条件语句的双分支结构由：
  if，then，else，fi等关键词组成，它进行一次条件匹配判断，如果与条件匹配，则去执行相应的预设命令，反之则取执行不匹配时预设的命令，相当于"如果....那么....或者....那么...."。
  双分支的if条件语句结构为：
  if 条件测试语句
     then 命令序列1
     else 命令序列2
  fi
  例如：
  if 能够ping通
     then 提示服务器正常工作
     else 报警服务器出现问题
  fi
  实例：验证某台主机是否在线，然后根据返回值的结果，要么显示主机在线信息，要么显示主机不在线信息。用到Linux中ping这个命令测试与目标主机的网络联通性，Linux的ping命令不像Windows中的ping一样尝试4次就结束，所以使用-c参数来规定尝试的次数，-i参数来定义每个包发送的时间间隔，-W参数来定义等待超过的时间：
  vim chkhost.sh
  #!/bin/bash
  ping -c 3 -i 0.2 -W 3 $1 &> /dev/null
  if [ $? -eq 0 ]
  then 
  echo "Host $1 is On-line."
  else
  echo "Host $1 is Off-line."
  fi
  脚本中$1代表的是脚本后参数1，$?是ping这个命令的返回值，返回值-eq 0，表示了ping的返回值是否等于0，如果等于0，说明ping的通则输出在线，else则$?这个返回值大于0，则输出主机ping不通。

  if条件语句的多分支结构由：
  if，then，else，elif，fi关键词组成，进行多次条件匹配判断，这多次判断中的任何一项在匹配成功后都会执行对应的预设命令，相当于"如果....那么....如果....那么....."。if条件语句的多分支结构是工作中最常用的一种条件判断结构，语法格式：
  if 条件测试操作1
     then 命令序列1
  elif 条件测试操作2
     then 命令序列2
  else
     命令序列3
  fi
  例如：
  if 分数为85~100之间
     then 判为优秀
  elif 分数在70~84之间
     then 判为合格
  else
      判为不及格
  fi
  实例：判断用户输入的分数在哪个区间，然后输出如Excellent，Pass，Fail等提示信息。在Linux中read命令用来读取用户输入信息，能够把接收到的用户输入信息赋值给后面指定的变量，-p参数用于向用户显示一定的提示信息：
  vim chkscore.sh
  #!/bin/bash
  read -p "Enter your score (0-100): " GRADE
  if [ $GRADE -ge 85 ] && [ $GRADE -le 100 ]
     then echo "$GRADE is Excellent"
  elif [ $GRADE -ge 70 ] && [ $GRADE -le 84 ]
     then echo "$GRADE is Pass"
  else
     echo "$GRADE is Fail"
  fi
  这个脚本首先用read命令读取用户输入信息值然后赋值给GRADE变量，if $GRADE 大于等于85 与 小于等于100，then 输出$GRADE is Excellent，elif $GRADE 大于等于70 与 小于等于84，then输出$GRADE is Pass，以上两个if 都不成立，else 输出$GRADE is Fail。 这个脚本一个问题点，如果$GRADE大于100或小于0，应该输出Error，疑问？？？

  2)for 条件循环语句
  for 循环语句允许脚本一次性读取多个信息，然后逐一对信息进行操作处理，当要处理的数据有范围时，用for循环很适合，for循环的语法结构：
  for 变量名 in 取值列表
  do 
    命令序列
  done
  如：
  for 用户名 in 列表文件
  do
    创建用户并设置密码
  done
  实例：使用for循环从列表中读取多个用户名，然后为其逐一创建用户账户并设置密码。
  首先创建一个文本文件作为用户名称的列表文件：user.txt，每个用户名单独一行
  vim user.txt
  google
  linux
  baidu
  ali
  接下来建立一个脚本example.sh
  vim example.sh
  #!/bin/bash
  read -p "Enter The Users Password: " PASSWD
  for UNAME in `cat user.txt`
  do
  id $UNAME &> /dev/null
  if [ $? -eq 0 ]
  then
  echo "Already exists"
  else
  useradd $UNAME &> /dev/null
  echo "$PASSWD" | passwd --stdin $UNAME &> /dev/null
  if [ $? -eq 0 ]
  then
  echo "$UNAME , Create success"
  else
  echo "$UNAME , Create failure"
  fi
  fi
  done
  这个脚本先使用read命令读取用户输入的密码值赋值给PASSWD变量，-p来给用户提示正在输入的内容(即作为账户密码)。然后在执行脚本后，自动使用列表文件user.txt中获取到所以用户的名称，然后逐一使用"id 用户名"这个命令查看用户信息，并使用$?作为id 命令的返回值，来判断id命令是否执行成功，也就是判断该账户是否已经存在。多说一句，/dev/null 被称为Linux的黑洞文件，把输出的信息重定向到这个文件等同于删除数据(类似于没有回收功能的回收站)，可以让用户的屏幕窗口保持简洁。执行批量创建用户的脚本，在输入为账户设定的密码后将由脚本自动检查并创建这些账户。多余信息通过输出重定向符转移到/dev/null 黑洞文件中，所以正常情况下，屏幕窗口只会有一个"Create success"的提示符，不会有其他内容。
  验证方式：/etc/passwd这个文件是用来保存用户账户信息的，可以查看这个文件，看看是否有这些新建的用户信息。
  for循环来实现批量测试主机ping探测：
  自动读取主机列表，然后逐个测试主机是否在线
  先建立一个主机列表文件
  vim ipadds.txt
  45.43.54.77
  45.43.63.128
  192.168.10.10
  192.168.10.11
  192.168.10.12
  然后用双分支if语句和for循环语句嵌套使用，让脚本从ipadds.txt自动读取IP地址，并将其赋值给HLIST变量，从而通过判断ping命令执行后的返回值来逐个测试主机是否在线。其中在变量赋值后的$ 这在脚本中起到命令的作用，是类似于转义字符中的``反引号的操作符，效果同样是执行括号或者双引号括起来的字符串中的命令。
  vim checkhost.sh
  #!/bin/bash
  HLIST=$(cat ~/ipadds.txt)
  for IP in $HLIST
  do
  ping -c 3 -i 0.2 -W 3 $IP &> /dev/null
  if [ $? -eq 0 ]
  then echo "Host $IP is On-line"
  else
  echo "Host $IP is Off-line"
  fi
  done

  3)while 条件循环语句
  while 条件循环语句是一种让脚本根据某些条件来重复执行命令的语句，它的循环结构往往在执行前并不能确定最终执行的次数，不同于for循环中有目标，有范围的使用场景。while循环语句通过判断条件测试的真假，来决定是否继续执行命令，若条件为真就继续执行，为假就结束循环，while循环语法格式：
  while 条件测试语句
  do
    命令序列
  done
  例如：
  while 未猜中正确价格
  do
    反复猜价格
  done
  实例：结合多分支的if条件测试语句与while条件循环语句，写一个用猜测数值大小的脚本Guess.sh。
 vim Guess.sh
 #!/bin/bash
 PRICE=$(expr $RANDOM % 1000)
 TIMES=0
 echo "商品实际价格为0-999之间，猜猜看是多少？"
 while true
 do
 read -p "请输入猜测商品的价格： " INT
 let TIMES++
 if [ $INT -eq $PRICE ]
 then
 echo "恭喜你答对了，实际价格为 $PRICE"
 echo "你总共猜了$TIMES次"
 exit 0
 elif [ $INT -gt $PRICE ]
 then
 echo "太高了！"
 else
 echo "太低了！"
 fi
 done
 该脚本使用$RANDOM 变量来调取一个随机数值(范围为0~32767)，将这个数对1000进行取余操作，并使用expr命令获得其结果，再用这个数值与用户通过read命令输入的数值$INT进行比较判断，分了三种情况，分别是判断用户输入数值等于，大于，小于expr得到的数值。当前这个内容不是重点，我们关注的是while条件循环语句中的条件测试始终为true，因此判断语句会无限执行，直到用户输入的数值等于expr取得的数值后，运行exit 0命令，终止脚本，在这个脚本中，添加了一些交互信息，从而使得用户与系统的互动性得以增强。而且每当循环到let TIMES++命令时都会让TIMES变量内的数值加1，用来统计循环总计执行了多少次。这可以让用户得知总共猜测了多少次之后，才猜对价格。

 4）case 条件测试语句
 与C语言中switch语句功能相似，case语句是在多个范围内匹配数据，若匹配成功则执行相关命令并结束整个条件测试，而如果数据不在所列出的范围内，则会去执行星号(*)中所定义的默认命令，case语句的语法结构：
 case 变量值 in
 模式1）
    命令序列1
    ； ；
 模式1）
    命令序列2
    ； ；
    .....
 *)
    默认的命令序列
 esac
 例如：
 case 输入的字符 in
 [a-z] | [A-Z])
    提示为字母。
    ; ;
 [0-9])
    提示为数字。
    ; ;
    ......
 *)
    提示为特殊字符
 esac
 在之前的Guess.sh脚本中只接受数字，输入字母会导致脚本崩溃。因为字母无法与数字进行大小比较，例如"a是否大于等于3"这样的命题是不成立的。必须要有一定的措施来判断用户的输入内容，当用户输入的内容不是数字时，脚本予以提示，从而免于崩溃。
 通过在脚本中使用case条件测试语句和通配符来满足这个需求
 实例：提示用户输入一个字符并将其赋值给变量KEY，然后根据变量KEY的值向用户显示其值是字母，数字还是其他字符。
  1 #!/bin/bash
  2 read -p "请输入一个字符，并按Enter键确认: " KEY
  3 case "$KEY" in
  4 [a-z] | [A-Z])
  5 echo "您输入的是 字母。"
  6 ;;
  7 [0-9])
  8 echo "您输入的是 数字"
  9 ;;
 10 *)
 11 echo "您输入的是 空格，功能键或其他控制字符"
 12 esac
5.计划任务服务程序
  分为1）一次性计划任务：今晚11：30开启网站服务 2）长期性计划任务：每周一的凌晨03：25把/home/wwwroot目录打包备份为backup.tar.gz
  一次性计划任务只执行一次，满足临时的工作需求。可以用at命令实现，"at 时间" 这种格式。查看已设置但还未执行的一次性计划任务，可以使用"at -l"命令，想要删除某个一次性计划任务可以使用"atrm 任务序号"。在使用at命令来设置一次性计划任务时，默认采用交互的方式。
  例：使用下述命令将系统设置为在今晚23：30自动重启网站服务
  #at 23：30
  at > systemctl restart httpd
  at >                        (直接ctrl+d结束计划编写)
  job 1 at Fri Mar 27 23:30:00 2020
  at -l
  1       Fri Mar 27 23:30:00 2020 a root
  洋气用法：
  echo "systemctl restart httpd" | at 23:30
  也会显示出job 2 at Fri Mar 27 23:30:00 2020 计划任务以添加
  再用at -l 查看会显示两个一次性计划：
  [root@balin ~]# at -l
  1       Fri Mar 27 23:30:00 2020 a root
  2       Fri Mar 27 23:30:00 2020 a root
  这个时候atrm 2来删除一个再看就剩一个计划任务了，这是一次性计划任务
  如果希望能够周期的，有规律的执行某些具体任务，可以使用crond服务，这个是Linux系统默认启用的服务。创建，编辑计划任务的命令"crontab -e"，查看当前计划任务的命令"crontab -l"，删除某条计划任务的命令"crontab -r"。
  如果是root用户可以使用"crontab -u"来编辑他人的计划任务。
  正式使用cront服务来部署计划任务前，注意cront服务设置任务的参数格式"分、时、日、月、星期 命令"。如果没有设置，用*来占位如下：
  字段                           说明
  分                             取值为 0～59 的整数
  时                             取值为 0～23 的任意整数
  日                             取值为 1～31 的任意整数
  月                             取值为 1～12 的任意整数
  星期                           取值为 0～7 的任意整数，其中 0 与 7 均为星期日
  命令                           要执行的命令或程序脚本
  实例：在每周一，三，五的凌晨03:25，都需要使用tar命令来把某个网站的数据目录进行打包处理，使其作为一个备份文件。
  crontab -e #这个命令执行后会弹出一个类似vim的编辑页面。
  编辑25 3 * * 1,3,5 /usr/bin/tar -czvf backup.tar.gz /home/wwwroot这个内容进去，25分3时*无指定某天*无指定月1,3,5指定周一，三，五然后/usr/bin/tar -czvf backup.tar.gz /home/wwwroot 指定要执行的计划。注意：除了用逗号来分别表示多个时间段，还可以使用减号来表示连续一段的时间周期，用除号/ 来表示执行任务的间隔时间，/2 表示间隔两(分钟，天等)执行依次任务。
  如果在crond服务中需要同时包含多条计划任务的命令语句，应每行仅写一行。例如，再添加一条计划任务，功能是每周一至周五的凌晨1点自动清空/tmp目录内的所有文件。
  首先，cront中的计划任务参数中，所有的命令一定要用，绝对路径的方式来写，whereis 可以查询某命令的路径。
  crontab -e添加一条0 1 * * 1-5 /usr/bin/rm -rf /tmp/* 计划任务
  cront服务的配置参数中，可以像shell脚本用#来添加注释。
  计划任务的"分"这个字段不能为空或用*号，而"日"和"星期"字段不能同时使用。